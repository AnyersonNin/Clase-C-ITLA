----------------------
 Asignación unidad 1
----------------------
API de Gestión de Tareas

Objetivo Principal

Crear una API funcional que permita:

- Realizar operaciones CRUD (crear, leer, actualizar y eliminar) sobre tareas.
- Implementar validaciones para garantizar datos consistentes.
- Manejar excepciones de manera estructurada.
- Utilizar programación asíncrona para mejorar el rendimiento.
-----------------
Funcionalidades
----------------
1. Operaciones CRUD
La API permite las siguientes acciones:

-Crear tareas: Proporcionando descripción, fecha de vencimiento y estado inicial.
- Consultar tareas: Obtener todas las tareas existentes o aplicar filtros por estado o fecha de vencimiento.
- Actualizar tareas: Modificar atributos como descripción, estado o fecha de vencimiento.
- Eliminar tareas: Eliminar tareas que ya no sean necesarias.
Al finalizar esta etapa:
1. La estructura del proyecto estará configurada según las mejores prácticas.
2. Los endpoints CRUD básicos estarán funcionales.
3. La conexión con la base de datos estará correctamente establecida.
4. Los datos de entrada estarán validados adecuadamente.
5. Las respuestas serán estructuradas y consistentes.
6. La API estará preparada para futuras expansiones.
--------------------------------------------------------------------------------
Desarrollo de la Etapa 2: Delegados, Funciones Anónimas y Uso de Action y Func
--------------------------------------------------------------------------------
Detalles de cambios:
Se han implementado el uso de delegados, funciones anónimas, Action, y Func, que incluyen:
1.	Delegado para validar tareas.
2.	Uso de Action para notificaciones.
3.	Func para cálculos derivados.
4.	Funciones anónimas para filtros.
Con estas modificaciones, la API se ha vuelto más flexible, reutilizable y sencilla de mantener. Ahora es capaz de validar, notificar y calcular de manera dinámica sin necesidad de alterar la lógica principal. Esto no solo optimiza la escalabilidad, sino que también facilita la integración de futuras funcionalidades.
-------------------------------------
Etapa 3: Patrones de Diseño en POO
-------------------------------------
1.	Flexibilidad y escalabilidad: La API será modular y adaptable a futuros cambios sin afectar su estructura.
2.	Mantenibilidad y organización: Mejor separación de responsabilidades, con un código más limpio y fácil de actualizar.
3.	Optimización y reutilización: Gestión eficiente de tareas con configuraciones específicas.
4.	Integración ágil: Nuevas funcionalidades podrán añadirse sin modificar el código existente.
Este enfoque mejora la eficiencia, reduce la complejidad y facilita la evolución de la API.
-------------------------------------------
Etapa 4: Programación Reactiva con Rx.NET
-------------------------------------------
1.	Ejecución secuencial: Las tareas se procesarán en orden, evitando solapamientos.
2.	Gestión eficiente: Uso de una cola FIFO para organizar la ejecución de tareas.
3.	Mayor estabilidad: Reducción de conflictos y mejora en la previsibilidad del sistema.
4.	Simplicidad y escalabilidad: Implementación sin depender de eventos en tiempo real.
Este enfoque optimiza el manejo de tareas, asegurando un procesamiento ordenado y eficiente.
-----------------------------------------------------------------------
Etapa 5: Optimización de funciones con memorización
-----------------------------------------------------------------------
1.	Mejora del rendimiento: Reducción del tiempo de respuesta mediante el almacenamiento en caché de resultados de funciones costosas.
2.	Evitar cálculos repetitivos: Al reutilizar los resultados almacenados en caché, se elimina la necesidad de realizar cálculos redundantes.
3.	Implementación de funciones puras: Uso de funciones que siempre devuelven el mismo resultado con las mismas entradas, facilitando su almacenamiento en caché.
4.	Escalabilidad optimizada: A medida que se añaden nuevas funciones, solo es necesario registrar sus resultados en la caché, sin afectar el rendimiento general.
----------------------------------------------
Etapa 6: Autenticación y Autorización con JWT
----------------------------------------------
1.	Generación del token JWT: Implementación de un endpoint de inicio de sesión que autentica al usuario con credenciales válidas y genera un token JWT con información del usuario y sus roles.
2.	Firma y seguridad del token: Uso de una clave secreta para firmar el token JWT, asegurando su integridad y evitando modificaciones no autorizadas.
3.	Almacenamiento seguro del token: Envío del token JWT al cliente, quien lo almacena de forma segura (localStorage, sessionStorage o cookies seguras).
4.	Protección de rutas: Aplicación de la validación de JWT en las rutas que requieren autenticación para garantizar que solo usuarios autorizados puedan acceder.
---------------------------------------------------
Desarrollo de la Etapa 7: Configuración de SignalR
---------------------------------------------------
1.Integración de SignalR en la API: Configuración del servidor para admitir comunicación en tiempo real utilizando SignalR.
2.Creación de un Hub de SignalR: Definición de un Hub en el servidor que maneje la conexión de los clientes y la transmisión de mensajes en tiempo real.
3.Registro de SignalR en el servidor: Configuración del middleware en la API para habilitar las conexiones WebSocket y permitir la transmisión de eventos en tiempo real.
4.Conexión de los clientes a SignalR: Implementación del código necesario en los clientes para conectarse al servidor SignalR y recibir notificaciones en tiempo real.
5.Emisión de notificaciones al crear una tarea: Configuración del servidor para que, cuando se cree una nueva tarea, envíe un mensaje a todos los clientes conectados.
